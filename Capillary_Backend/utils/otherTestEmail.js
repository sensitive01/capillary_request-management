const nodemailer = require("nodemailer");

const sendLoginEmail = async (userEmail, subject, textContent, htmlContent) => {
  try {
    const transporter = nodemailer.createTransport({
      service: "Gmail",
      auth: {
        user: process.env.EMAIL_ADDRESS,
        pass: process.env.EMAIL_PASSWORD,
      },
    });

    const mailOptions = {
      from: '"Your App" <your-email@example.com>',
      to: userEmail,
      subject: subject,
      text: textContent,
      html: htmlContent,
    };

    await transporter.sendMail(mailOptions);
    console.log(`Email sent to ${userEmail} successfully!`);
  } catch (error) {
    console.error(`Error sending email to ${userEmail}:`, error);
  }
};

const sendBulkEmails = async ({ emails, empName, department, reqId }) => {
  try {
    const transporter = nodemailer.createTransport({
      service: "Gmail",
      auth: {
        user: process.env.EMAIL_ADDRESS,
        pass: process.env.EMAIL_PASSWORD,
      },
    });

    const mailPromises = emails.map((email) => {
      const subject = "Request Generated";
      const textContent = `Dear User, a request has been generated by ${empName} from the ${department} department with request ID: ${reqId}. Please log in to the app and accept the request.`;
      const htmlContent = `<p>Dear User,</p><p>A request has been generated by <strong>${empName}</strong> from the <strong>${department}</strong> department with request ID: <strong>${reqId}</strong>.</p><p>Please log in to the app and accept the request.</p>`;

      const mailOptions = {
        from: '"Your App" <your-email@example.com>',
        to: email,
        subject: subject,
        text: textContent,
        html: htmlContent,
      };

      return transporter.sendMail(mailOptions);
    });

    await Promise.all(mailPromises);
    console.log("Bulk emails sent successfully!");
  } catch (error) {
    console.error("Error sending bulk emails:", error);
  }
};

const sendIndividualEmail = async (type, userEmail, empName, department, reqId) => {
  let subject, textContent, htmlContent;

  switch (type) {
    case 2: // Awaiting approval
      subject = "Request Awaiting Approval";
      textContent = `Employee ${empName} from the ${department} department has made a request with request ID: ${reqId}. This department is approved and awaiting your further approval.`;
      htmlContent = `<p>Employee <strong>${empName}</strong> from the <strong>${department}</strong> department has made a request with request ID: <strong>${reqId}</strong>.</p><p>This department is approved and awaiting your further approval.</p>`;
      break;

    case 3: // Preview and approve
      subject = "Preview and Approve Request";
      textContent = `An employee from your department (${department}) has made a request with request ID: ${reqId}. Please preview the request and approve it.`;
      htmlContent = `<p>An employee from your department (<strong>${department}</strong>) has made a request with request ID: <strong>${reqId}</strong>.</p><p>Please preview the request and approve it.</p>`;
      break;

    default:
      console.error("Invalid email type");
      return;
  }

  await sendLoginEmail(userEmail, subject, textContent, htmlContent);
};

module.exports = { sendLoginEmail, sendBulkEmails, sendIndividualEmail };
