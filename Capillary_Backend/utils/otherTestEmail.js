const nodemailer = require("nodemailer");

const sendLoginEmail = async (userEmail, subject, textContent, htmlContent) => {
  try {
    const transporter = nodemailer.createTransport({
      service: "Gmail",
      auth: {
        user: process.env.EMAIL_ADDRESS,
        pass: process.env.EMAIL_PASSWORD,
      },
    });

    const mailOptions = {
      from: '"Your App" <your-email@example.com>',
      to: userEmail,
      subject: subject,
      text: textContent,
      html: htmlContent,
    };

    await transporter.sendMail(mailOptions);
    console.log(`Email sent to ${userEmail} successfully!`);
  } catch (error) {
    console.error(`Error sending email to ${userEmail}:`, error);
  }
};

// const sendBulkEmails = async ( emails, empName, department, reqId ) => {
//   try {
//     const transporter = nodemailer.createTransport({
//       service: "Gmail",
//       auth: {
//         user: process.env.EMAIL_ADDRESS,
//         pass: process.env.EMAIL_PASSWORD,
//       },
//     });

//     const mailPromises = emails.map((email) => {
//       const subject = "Request Generated";
//       const textContent = `Dear User, a request has been generated by ${empName} from the ${department} department with request ID: ${reqId}. Please log in to the app and accept the request.`;
//       const htmlContent = `<p>Dear User,</p><p>A request has been generated by <strong>${empName}</strong> from the <strong>${department}</strong> department with request ID: <strong>${reqId}</strong>.</p><p>Please log in to the app and accept the request.</p>`;

//       const mailOptions = {
//         from:`"Capillary Technology" ${process.env.EMAIL_ADDRESS}`,
//         to: email,
//         subject: subject,
//         text: textContent,
//         html: htmlContent,
//       };

//       return transporter.sendMail(mailOptions);
//     });

//     await Promise.all(mailPromises);
//     console.log("Bulk emails sent successfully!");
//   } catch (error) {
//     console.error("Error sending bulk emails:", error);
//   }
// };

const sendBulkEmails = async (recipientEmails, empName, department, reqId) => {
  try {
    // Create a transporter object using the default SMTP transport
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.EMAIL_ADDRESS,
        pass: process.env.EMAIL_PASSWORD,
      },
    });

    // Loop through the recipient emails and send individual emails
    const mailPromises = recipientEmails.map((email) => {
      const mailOptions = {
        from: `"Capillary Finance" <${process.env.EMAIL_ADDRESS}>`,
        to: email,
        subject: `New PO-Request for Review ‚Äì ${reqId}`,
        html: `
        <html>
          <body>
            <div style="font-family: Arial, sans-serif; padding: 20px;">
              <h2>Hi ${email.split("@")[0]},</h2>
              <p>We are reaching out to inform you that a new po-request has been generated, and we require your review and approval.</p>
              <p><strong>Request ID:</strong> ${reqId}</p>
              <p><strong>Submitted By:</strong> ${empName}</p>
              <p><strong>Department:</strong> ${department}</p>
              <p><strong>Status:</strong> Pending</p>
              <p>Please review the details of this request and take the necessary action. We appreciate your prompt attention to this matter.</p>
              <a href="https://porequests.corp.capillarytech.com" style="padding: 10px 20px; background-color: #007BFF; color: white; text-decoration: none; border-radius: 5px; margin-top: 20px;">Login to Review Request</a>
              <p>If you are unable to click the button, copy and paste the following URL into your browser:</p>
              <p><a href="https://porequests.corp.capillarytech.com">https://porequests.corp.capillarytech.com</a></p>
            </div>
          </body>
        </html>
        `,
      };

      // Send the email
      return transporter.sendMail(mailOptions);
    });

    // Wait for all emails to be sent
    await Promise.all(mailPromises);
    console.log("Bulk emails sent successfully");
  } catch (error) {
    console.error("Error sending bulk emails:", error);
  }
};
const sendIndividualEmail = async (
  type,
  userEmail,
  empName,
  department,
  reqId,
  approvalRecord
) => {
  try {
    const transporter = nodemailer.createTransport({
      service: "Gmail",
      auth: {
        user: process.env.EMAIL_ADDRESS,
        pass: process.env.EMAIL_PASSWORD,
      },
    });

    let subject, textContent, htmlContent;

    switch (type) {
      case "EMPLOYEE": // Notification to employee
        subject = "Request Status Update";
        textContent = `Your request (ID: ${reqId}) has been ${approvalRecord.status} by ${approvalRecord.departmentName} department on ${approvalRecord.approvalDate}.`;
        htmlContent = `
          <!DOCTYPE html>
          <html>
          <head>
            <style>
              .email-container {
                max-width: 600px;
                margin: 0 auto;
                font-family: Arial, sans-serif;
                padding: 20px;
              }
              .header {
                background-color: #f8f9fa;
                padding: 20px;
                border-radius: 5px;
                margin-bottom: 20px;
              }
              .content {
                line-height: 1.6;
                color: #333;
              }
              .highlight {
                color: #0056b3;
                font-weight: bold;
              }
              .status-box {
                background-color: #e8f4fd;
                border-left: 4px solid #0056b3;
                padding: 15px;
                margin: 20px 0;
              }
              .footer {
                margin-top: 30px;
                padding-top: 20px;
                border-top: 1px solid #eee;
                font-size: 12px;
                color: #666;
              }
            </style>
          </head>
          <body>
            <div class="email-container">
              <div class="header">
                <h2 style="margin: 0; color: #333;">Request Status Update</h2>
              </div>
              <div class="content">
                <p>Dear ${empName},</p>
                <div class="status-box">
                  <p>Your request has been processed with the following status:</p>
                  <ul style="list-style: none; padding-left: 0;">
                    <li>üìù Request ID: <span class="highlight">${reqId}</span></li>
                    <li>üîÑ Status: <span class="highlight">${
                      approvalRecord.status
                    }</span></li>
                    <li>‚úÖ Processed by: <span class="highlight">${
                      approvalRecord.departmentName
                    } Department</span></li>
                    <li>üìÖ Process Date: <span class="highlight">${
                      approvalRecord.approvalDate
                    }</span></li>
                  </ul>
                </div>
              </div>
              
            </div>
          </body>
          </html>
        `;
        break;

      case "AUTHORITY": // Notification to next authority
        subject = "Request Pending Review";
        textContent = `A request (ID: ${reqId}) from ${empName} in ${department} department has been ${approvalRecord.status} by ${approvalRecord.departmentName} department and requires your review.`;
        htmlContent = `
          <!DOCTYPE html>
          <html>
          <head>
            <style>
              .email-container {
                max-width: 600px;
                margin: 0 auto;
                font-family: Arial, sans-serif;
                padding: 20px;
              }
              .header {
                background-color: #f8f9fa;
                padding: 20px;
                border-radius: 5px;
                margin-bottom: 20px;
              }
              .content {
                line-height: 1.6;
                color: #333;
              }
              .highlight {
                color: #0056b3;
                font-weight: bold;
              }
              .status-box {
                background-color: #fff3e0;
                border-left: 4px solid #ff9800;
                padding: 15px;
                margin: 20px 0;
              }
              .footer {
                margin-top: 30px;
                padding-top: 20px;
                border-top: 1px solid #eee;
                font-size: 12px;
                color: #666;
              }
            </style>
          </head>
          <body>
            <div class="email-container">
              <div class="header">
                <h2 style="margin: 0; color: #333;">Request Pending Your Review</h2>
              </div>
              <div class="content">
                <p>Dear Team,</p>
                <div class="status-box">
                  <p>A request requires your review with the following details:</p>
                  <ul style="list-style: none; padding-left: 0;">
                    <li>üë§ Employee Name: <span class="highlight">${empName}</span></li>
                    <li>üè¢ Department: <span class="highlight">${department}</span></li>
                    <li>üìù Request ID: <span class="highlight">${reqId}</span></li>
                    <li>üîÑ Status: <span class="highlight">${
                      approvalRecord.status
                    }</span></li>
                    <li>‚úÖ Processed by: <span class="highlight">${
                      approvalRecord.departmentName
                    } Department</span></li>
                    <li>üìÖ Process Date: <span class="highlight">${
                      approvalRecord.approvalDate
                    }</span></li>
                  </ul>
                </div>
              </div>
             
            </div>
          </body>
          </html>
        `;
        break;

      default:
        console.error("Invalid email type");
        return;
    }

    const mailOptions = {
      from: `"Capillary Technology" <${process.env.EMAIL_ADDRESS}>`,
      to: userEmail,
      subject: subject,
      text: textContent,
      html: htmlContent,
    };

    await transporter.sendMail(mailOptions);
    console.log(`Email sent successfully to ${userEmail}`);
  } catch (error) {
    console.error("Error sending email:", error);
  }
};

module.exports = { sendLoginEmail, sendBulkEmails, sendIndividualEmail };
