const nodemailer = require("nodemailer");

const sendLoginEmail = async (userEmail, subject, textContent, htmlContent) => {
  try {
    const transporter = nodemailer.createTransport({
      service: "Gmail",
      auth: {
        user: process.env.EMAIL_ADDRESS,
        pass: process.env.EMAIL_PASSWORD,
      },
    });

    const mailOptions = {
      from: '"Your App" <your-email@example.com>',
      to: userEmail,
      subject: subject,
      text: textContent,
      html: htmlContent,
    };

    await transporter.sendMail(mailOptions);
    console.log(`Email sent to ${userEmail} successfully!`);
  } catch (error) {
    console.error(`Error sending email to ${userEmail}:`, error);
  }
};

// const sendBulkEmails = async ( emails, empName, department, reqId ) => {
//   try {
//     const transporter = nodemailer.createTransport({
//       service: "Gmail",
//       auth: {
//         user: process.env.EMAIL_ADDRESS,
//         pass: process.env.EMAIL_PASSWORD,
//       },
//     });

//     const mailPromises = emails.map((email) => {
//       const subject = "Request Generated";
//       const textContent = `Dear User, a request has been generated by ${empName} from the ${department} department with request ID: ${reqId}. Please log in to the app and accept the request.`;
//       const htmlContent = `<p>Dear User,</p><p>A request has been generated by <strong>${empName}</strong> from the <strong>${department}</strong> department with request ID: <strong>${reqId}</strong>.</p><p>Please log in to the app and accept the request.</p>`;

//       const mailOptions = {
//         from:`"Capillary Technology" ${process.env.EMAIL_ADDRESS}`,
//         to: email,
//         subject: subject,
//         text: textContent,
//         html: htmlContent,
//       };

//       return transporter.sendMail(mailOptions);
//     });

//     await Promise.all(mailPromises);
//     console.log("Bulk emails sent successfully!");
//   } catch (error) {
//     console.error("Error sending bulk emails:", error);
//   }
// };

const sendBulkEmails = async (recipientEmails, empName, department, reqId) => {
  try {
    // Create a transporter object using the default SMTP transport
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.EMAIL_ADDRESS,
        pass: process.env.EMAIL_PASSWORD,
      },
    });

    // Loop through the recipient emails and send individual emails
    const mailPromises = recipientEmails.map((email) => {
      const mailOptions = {
        from: `"Capillary Finance" <${process.env.EMAIL_ADDRESS}>`,
        to: email,
        subject: `New PO-Request for Review – ${reqId}`,
        html: `
        <html>
          <body>
            <div style="font-family: Arial, sans-serif; padding: 20px;">
              <h2>Hi ${email.split("@")[0]},</h2>
              <p>We are reaching out to inform you that a new po-request has been generated, and we require your review and approval.</p>
              <p><strong>Request ID:</strong> ${reqId}</p>
              <p><strong>Submitted By:</strong> ${empName}</p>
              <p><strong>Department:</strong> ${department}</p>
              <p><strong>Status:</strong> Pending</p>
              <p>Please review the details of this request and take the necessary action. We appreciate your prompt attention to this matter.</p>
              <a href="https://porequests.corp.capillarytech.com" style="padding: 10px 20px; background-color: #007BFF; color: white; text-decoration: none; border-radius: 5px; margin-top: 20px;">Login to Review Request</a>
              <p>If you are unable to click the button, copy and paste the following URL into your browser:</p>
              <p><a href="https://porequests.corp.capillarytech.com">https://porequests.corp.capillarytech.com</a></p>
            </div>
          </body>
        </html>
        `,
      };

      // Send the email
      return transporter.sendMail(mailOptions);
    });

    // Wait for all emails to be sent
    await Promise.all(mailPromises);
    console.log("Bulk emails sent successfully");
  } catch (error) {
    console.error("Error sending bulk emails:", error);
  }
};
const sendIndividualEmail = async (
  type,
  userEmail,
  empName,
  autoDepartment,
  reqId,
  approvalRecord
) => {
  try {
    const transporter = nodemailer.createTransport({
      service: "Gmail",
      auth: {
        user: process.env.EMAIL_ADDRESS,
        pass: process.env.EMAIL_PASSWORD,
      },
    });

    let subject, textContent, htmlContent;

    switch (type) {
      case "EMPLOYEE": // Notification to employee
        subject = "Request Status Update";
        textContent = `Your request (ID: ${reqId}) has been ${approvalRecord.status} by ${approvalRecord.departmentName} department on ${approvalRecord.approvalDate}.`;
        htmlContent = `
         <!DOCTYPE html>
<html>
<head>
  <style>
    body {
      margin: 0;
      padding: 0;
      background-color: #f5f5f5;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    .email-container {
      max-width: 600px;
      margin: 20px auto;
      background-color: #ffffff;
      border: 1px solid #e0e0e0;
      border-radius: 4px;
    }
    .header {
      background-color: #4a5568;
      color: white;
      padding: 15px 25px;
      border-bottom: 3px solid #38b2ac;
    }
    .header h2 {
      margin: 0;
      font-weight: 500;
    }
    .subheader {
      background-color: #f9f9f9;
      padding: 10px 25px;
      border-bottom: 1px solid #e0e0e0;
      font-size: 14px;
      color: #666;
    }
    .content {
      padding: 25px;
      line-height: 1.6;
      color: #333;
    }
    .highlight {
      color: #38b2ac;
      font-weight: 600;
    }
    .status-box {
      background-color: #f0fff4;
      border: 1px solid #c6f6d5;
      border-radius: 4px;
      padding: 20px;
      margin: 20px 0;
    }
    .status-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 15px;
      margin-top: 15px;
    }
    .status-item {
      padding: 10px;
      background-color: white;
      border-radius: 4px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.05);
    }
    .status-label {
      font-size: 12px;
      text-transform: uppercase;
      color: #718096;
      margin-bottom: 5px;
    }
    .status-value {
      font-weight: 600;
      color: #2d3748;
    }
    .action-area {
      background-color: #f9f9f9;
      padding: 20px;
      text-align: center;
      border-top: 1px solid #e0e0e0;
    }
    .action-button {
      display: inline-block;
      background-color: #38b2ac;
      color: white;
      padding: 10px 24px;
      text-decoration: none;
      border-radius: 4px;
      font-weight: 500;
      transition: background-color 0.2s;
    }
    .action-button:hover {
      background-color: #319795;
    }
    .footer {
      padding: 15px 25px;
      font-size: 12px;
      color: #718096;
      text-align: center;
      border-top: 1px solid #e0e0e0;
    }
  </style>
</head>
<body>
  <div class="email-container">
    <div class="header">
      <h2>Request Status Update</h2>
    </div>
    <div class="subheader">
      Request ID: ${reqId}
    </div>
    <div class="content">
      <p>Dear ${empName},</p>
      
      <p>We're writing to inform you that there has been an update to your request. Please review the current status below:</p>
      
      <div class="status-box">
        <h3 style="margin-top: 0; color: #38b2ac;">Current Status: <span style="color: #2d3748;">${approvalRecord.status}</span></h3>
        
        <div class="status-grid">
          <div class="status-item">
            <div class="status-label">Department</div>
            <div class="status-value">${approvalRecord.departmentName}</div>
          </div>
          
          <div class="status-item">
            <div class="status-label">Processing Date</div>
            <div class="status-value">${approvalRecord.approvalDate}</div>
          </div>
        </div>
      </div>
      
      <p>This status update has been recorded in our system and relevant departments have been notified. If you need further information, please use the button below to access your request details.</p>
    </div>
    

    

  </div>
</body>
</html>
        `;
        break;

      case "AUTHORITY": // Notification to next authority
        subject = "Request Pending Review";
        textContent = `A request (ID: ${reqId}) from ${empName}  has been ${approvalRecord.status} by ${approvalRecord.departmentName} department and requires your review.`;
        htmlContent = `
         <!DOCTYPE html>
<html>
<head>
  <style>
    body {
      margin: 0;
      padding: 0;
      background-color: #f7f7f7;
      font-family: Arial, sans-serif;
    }
    .email-container {
      max-width: 600px;
      margin: 20px auto;
      background-color: #ffffff;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      overflow: hidden;
    }
    .header {
      background-color: #ff9800;
      padding: 20px;
      text-align: center;
    }
    .header h2 {
      margin: 0;
      color: #ffffff;
      font-weight: 600;
    }
    .content {
      padding: 25px;
      line-height: 1.6;
      color: #333;
    }
    .highlight {
      color: #ff9800;
      font-weight: 600;
    }
    .status-box {
      background-color: #fff3e0;
      border-left: 4px solid #ff9800;
      padding: 20px;
      margin: 20px 0;
      border-radius: 0 4px 4px 0;
    }
    .status-item {
      display: flex;
      align-items: flex-start;
      margin-bottom: 12px;
    }
    .status-icon {
      margin-right: 12px;
      min-width: 24px;
      font-size: 18px;
    }
    .status-text {
      flex: 1;
    }
    .action-buttons {
      text-align: center;
      margin: 25px 0 10px;
    }
    .action-button {
      display: inline-block;
      padding: 12px 24px;
      text-decoration: none;
      border-radius: 4px;
      font-weight: bold;
      margin: 0 10px;
      transition: background-color 0.2s;
    }
    .approve-button {
      background-color: #4caf50;
      color: white;
    }
    .approve-button:hover {
      background-color: #3d8b40;
    }
    .reject-button {
      background-color: #f44336;
      color: white;
    }
    .reject-button:hover {
      background-color: #d32f2f;
    }
    .priority {
      display: inline-block;
      background-color: #ff9800;
      color: white;
      padding: 3px 8px;
      border-radius: 12px;
      font-size: 12px;
      margin-left: 10px;
      font-weight: bold;
    }
    .footer {
      margin-top: 20px;
      padding: 15px 20px;
      background-color: #f8f9fa;
      font-size: 12px;
      color: #666;
      text-align: center;
      border-top: 1px solid #eee;
    }
  </style>
</head>
<body>
  <div class="email-container">
    <div class="header">
      <h2>Request Pending For Your Review And Awaiting For Your Response</h2>
    </div>
    <div class="content">
      <p>Dear Team,</p>
      
      <p>A new request has been submitted and requires your immediate attention. Please review the following details:</p>
      
      <div class="status-box">
        <h3 style="margin-top: 0; margin-bottom: 15px;">Request Details <span class="priority">Pending</span></h3>
        
        <div class="status-item">
          <div class="status-icon">👤</div>
          <div class="status-text">Approver Name: <span class="highlight">${empName}</span></div>
        </div>
        

        
        <div class="status-item">
          <div class="status-icon">📝</div>
          <div class="status-text">Request ID: <span class="highlight">${reqId}</span></div>
        </div>
        
        <div class="status-item">
          <div class="status-icon">🔄</div>
          <div class="status-text">Status: <span class="highlight">${
            approvalRecord.status
          } by ${autoDepartment}</span></div>
        </div>
        
        <div class="status-item">
          <div class="status-icon">✅</div>
          <div class="status-text">Department: <span class="highlight">${
            approvalRecord.departmentName || approvalRecord.department
          } </span></div>
        </div>
        
        <div class="status-item">
          <div class="status-icon">📅</div>
          <div class="status-text">Request Date: <span class="highlight">${
            approvalRecord.approvalDate
          }</span></div>
        </div>
      </div>
      
      <p>Please review this request at your earliest convenience. Your prompt attention to this matter is greatly appreciated.</p>
      
     
    </div>
 
  </div>
</body>
</html>
        `;
        break;

      default:
        console.error("Invalid email type");
        return;
    }

    const mailOptions = {
      from: `"Capillary Technology" <${process.env.EMAIL_ADDRESS}>`,
      to: userEmail,
      subject: subject,
      text: textContent,
      html: htmlContent,
    };

    await transporter.sendMail(mailOptions);
    console.log(`Email sent successfully to ${userEmail}`);
  } catch (error) {
    console.error("Error sending email:", error);
  }
};

module.exports = { sendLoginEmail, sendBulkEmails, sendIndividualEmail };
